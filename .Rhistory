#date_ = "May 1"
separate = str_split(date_, " ")
month  = separate[[1]][1]
day = separate[[1]][2]
init = substr(month, start = 1, stop = 1)
if (init == "F") {
new_month = '2' }
else if (init == "M") {
new_month = '3' }
else {
new_month = '4' }
year = '20'
new_date = paste(new_month, day, year,sep = '/')
return(new_date)
}
fix_dates("Feb 2")
# Change date format
library(stringr)
fix_dates("Feb 2")
# USE.NAMES = F turns to vector
vec = Vectorize(fix_dates, vectorize.args = "date_", USE.NAMES = F)
new_dates = vec(deaths$Date)
library(lubridate)
new_dates
mdy(new_dates)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
new_dates
deaths$Date = new_dates
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(Date)]
head(death_by_dates)
as.Date(new_dates)
deaths$Date = as.Date(new_dates)
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(Date)]
head(death_by_dates)
library(scales)
ggplot(cases, aes(x=Date, y = V1)) +
geom_line() + scale_x_date()
ggplot(cases, aes(x=Date, y = V1)) +
geom_line() + scale_x_date(labels = date_format("%b"))
ggplot(cases, aes(x=Date, y = V1)) +
geom_line() #+ scale_x_date(labels = date_format("%b"))
ggplot(deaths, aes(x=Date, y = V1)) +
geom_line()  + scale_x_date(labels = date_format("%b"))
library(prophet)
deaths$ds = as.Date(new_dates)
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(ds)]
head(death_by_dates)
# use fb prophet
m = prophet(deaths_by_dates)
# use fb prophet
m = prophet(death_by_dates)
deaths$Date = as.Date(new_dates)
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(Date)]
head(death_by_dates)
# rename Date => ds and V1 => y
setnames(death_by_dates, old = c('Date','y'), new = c('ds','y'))
# rename Date => ds and V1 => y
setnames(death_by_dates, old = c('Date','V1'), new = c('ds','y'))
# use fb prophet
m = prophet(death_by_dates)
# predict next 20 days
future = make_future_dataframe(m, periods = 20)
# make forecast
forecast = predict(m, future)
# plot predicted data
plot(m, forecast)
death_by_dates
# break down data
prophet_plot_components(m, forecast)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal()
death_by_dates
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(Date)]
head(death_by_dates)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal()
log(deaths$V1)
death_by_dates$log_deaths = log(death_by_dates$V1)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal()
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
lm = lm(V1 ~ Date, data = death_by_dates)
lm
summary(lm)
# normality assumption?
qqplot(death_by_dates$V1); qqline(death_by_dates$V1)
# normality assumption?
qqplot(death_by_dates$V1)
# normality assumption?
qqplot(death_by_dates$V1)
# normality assumption?
qqnorm(death_by_dates$V1)
qqline(death_by_dates$V1)
# normality assumption?
qqnorm(death_by_dates$V1)
qqnorm(death_by_dates$V1)
qqline(death_by_dates$V1)
# check residual-fitted values plot
plot(lm)
# check residual-fitted values plot
plot(lm, which = 1:2)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) + geom_smooth(method = lm, se = F) +
theme_minimal()
death_by_dates$log_deaths = log(death_by_dates$V1)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) + geom_smooth(method = lm, se = F) +
theme_minimal()
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal()# + geom_smooth(method = lm, se = F)
log_m = lm(log_deaths ~ Date, data = death_by_dates)
summary(log_m)
# check residual-fitted and qqplotv plot
plot(log_m, which = 1:2)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
deaths = fread('COVID_19.csv')
head(deaths)
library(stringr)
fix_dates = function(date_) {
#date_ = "May 1"
separate = str_split(date_, " ")
month  = separate[[1]][1]
day = separate[[1]][2]
init = substr(month, start = 1, stop = 1)
if (init == "F") {
new_month = '2' }
else if (init == "M") {
new_month = '3' }
else {
new_month = '4' }
year = '20'
new_date = paste(new_month, day, year,sep = '/')
return(new_date)
}
fix_dates("Feb 2")
# USE.NAMES = F turns to vector
vec = Vectorize(fix_dates, vectorize.args = "date_", USE.NAMES = F)
new_dates = vec(deaths$Date)
library(lubridate)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
deaths$Date = as.Date(new_dates)
# get total number of deaths per day
death_by_dates = deaths[, .(sum(value)), by = .(Date)]
head(death_by_dates)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
library(ggplot2)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = lm, se = F)
ggplot(death_by_dates, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
linear_m = lm(V1 ~ Date, data = death_by_dates)
summary(linear_m)
\mu
\\mu
# check residual-fitted and qqplotv plot
plot(linear_m, which = 1:2)
sum(linear_m$residuals^2)
mean(linear_m$residuals^2)
345.7^2
MSE = mean(linear_m$residuals)
paste("MSE:",MSE)
MSE = mean(linear_m$residuals^2)
paste("MSE:",MSE)
summary(linear_m)
MSE = mean(linear_m$residuals^2)
paste("MSE:",MSE)
test = summary(linear_m)
test$sigma
MSE = summary(linear_m)$sigma^2
paste("MSE:",MSE)
linear_m = lm(V1 ~ Date, data = death_by_dates)
summary(linear_m)
MSE = summary(linear_m)$sigma^2
paste("MSE:",MSE)
death_by_dates$log_deaths = log(death_by_dates$V1)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
log_m = lm(log_deaths ~ Date, data = death_by_dates)
log_m = lm(log_deaths ~ Date, data = death_by_dates)
summary(log_m)
MSE = summary(log_m)$sigma^2
paste('MSE:', MSE)
# check residual-fitted and qqplotv plot
plot(log_m, which = 1:2)
# rename Date => ds and V1 => y
setnames(death_by_dates, old = c('Date','V1'), new = c('ds','y'))
# use fb prophet
m = prophet(death_by_dates)
library(prophet)
# use fb prophet
m = prophet(death_by_dates)
plot(m)
# predict next 20 days
future = make_future_dataframe(m, periods = 0)
# make forecast
forecast = predict(m, future)
# predict next 20 days
future = make_future_dataframe(m, periods = 20)
# make forecast
forecast = predict(m, future)
# plot predicted data
plot(m, forecast)
# break down data
prophet_plot_components(m, forecast)
?prophet_plot_components
# break down data into overall trend and weekly average reports
prophet_plot_components(m, forecast)[2]
# break down data into overall trend and weekly average reports
prophet_plot_components(m, forecast)
# predict next 20 days
future = make_future_dataframe(m, periods = 1)
# make forecast
forecast = predict(m, future)
# plot predicted data
plot(m, forecast)
# break down data into overall trend and weekly average reports
prophet_plot_components(m, forecast)
# break down data into overall trend and weekly average reports
prophet_plot_components(m, forecast)
quan_vs_groups(deaths,"value", "region")
cases = fread('reported_COVID_cases.csv')
head(cases)
quan_vs_groups(cases,"value", "region")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
deaths = fread('COVID_19.csv')
head(deaths)
setnames(death_by_dates, old = c('V1'), new = c('deaths'))
head(deaths)
setnames(deaths, old = c('V1'), new = c('deaths'))
head(deaths)
deaths = fread('COVID_19.csv')
setnames(deaths, old = c('value'), new = c('deaths'))
head(deaths)
fix_dates = function(date_) {
#date_ = "May 1"
separate = str_split(date_, " ")
month  = separate[[1]][1]
day = separate[[1]][2]
init = substr(month, start = 1, stop = 1)
if (init == "F") {
new_month = '2' }
else if (init == "M") {
new_month = '3' }
else {
new_month = '4' }
year = '20'
new_date = paste(new_month, day, year,sep = '/')
return(new_date)
}
# USE.NAMES = F turns to vector
vec = Vectorize(fix_dates, vectorize.args = "date_", USE.NAMES = F)
new_dates = vec(deaths$Date)
library(lubridate)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
deaths$Date = as.Date(new_dates)
# get total number of deaths per day
death_by_dates = deaths[, .(sum(deaths)), by = .(Date)]
head(death_by_dates)
setnames(death_by_dates, old = c('V1'), new = c('total_deaths_per_day'))
head(death_by_dates)
ggplot(death_by_dates, aes(x = Date, y = total_deaths_per_day)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
linear_m = lm(total_deaths_by_day ~ Date, data = death_by_dates)
linear_m = lm(total_deaths_per_day ~ Date, data = death_by_dates)
summary(linear_m)
MSE = summary(linear_m)$sigma^2
paste("MSE:",MSE)
# check residual-fitted and qqplotv plot
plot(linear_m, which = 1:2)
death_by_dates$log_deaths = log(death_by_dates$total_deaths_per_day)
ggplot(death_by_dates, aes(x = Date, y = log_deaths)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
log_m = lm(log_deaths ~ Date, data = death_by_dates)
summary(log_m)
MSE = summary(log_m)$sigma^2
paste('MSE:', MSE)
# check residual-fitted and qqplotv plot
plot(log_m, which = 1:2)
# rename Date => ds and V1 => y
setnames(death_by_dates, old = c('Date','total_deaths_per_day'), new = c('ds','y'))
# use fb prophet
m = prophet(death_by_dates)
# predict next 20 days
future = make_future_dataframe(m, periods = 1)
# make forecast
forecast = predict(m, future)
# break down data into overall trend and weekly average reports
prophet_plot_components(m, forecast)
head(deaths)
quan_vs_groups(deaths,"deaths", "region")
cases = fread('reported_COVID_cases.csv')
cases = fread('reported_COVID_cases.csv')
setwd('C:\\Users\\erick\\Documents\\University\\UH-D\\Spring 2020\\statistical_regression\\group_project')
deaths = fread('COVID_19.csv')
cases = fread('reported_COVID_cases.csv')
head(cases)
setnames(cases, old = 'value', new = 'reported_COVID_cases')
head(cases)
quan_vs_groups(cases,"reported_COVID_cases", "region")
head(deaths)
unique(deatsh$state)
head(death_by_dates)
unique(deaths$state)
dim(death_by_dates)
cases
test = dcast(cases, Date ~ state)
head(test)
tail(test)
dim(test)
dim(cases)
cases[1]
cases[46]
cases[92]
cases[91]
knitr::opts_chunk$set(echo = F)
# no
test = dcast(cases, Date ~state, value.var = reported_COVID_cases)
head(cases)
# no
test = dcast(cases, Date ~state, value.var = reported_COVID_cases)
?ddcast
??ddcast
# no
cases_ = cases[, .(Date, state, reported_COVID_cases)]
test = dcast(cases_, Date ~state)
head(test)
# no
cases_reported = cases[, .(Date, state, reported_COVID_cases)]
state_reported = cases[, .(Date, state, reported_COVID_cases)]
region_reported = cases[, .(Date, state, reported_COVID_cases)]
country_reported = cases[, .(Date, state, reported_COVID_cases)]
wide = dcast(cases_, Date ~state)
wide_cases = dcast(cases_reported, Date ~state)
state_reported = cases[, .(Date, state, `Total Confirmed Cases by States`)]
wide_state = dcast(state_reported, Date ~state)
caseshead(wide_state)
head(wide_state)
str(wide_cases)
write.csv(wide_cases, 'reported_COVID_cases_wideformat.csv')
fix_dates = function(date_) {
#date_ = "May 1"
separate = str_split(date_, " ")
month  = separate[[1]][1]
day = separate[[1]][2]
init = substr(month, start = 1, stop = 1)
if (init == "F") {
new_month = '2' }
else if (init == "M") {
new_month = '3' }
else {
new_month = '4' }
year = '20'
new_date = paste(new_month, day, year,sep = '/')
return(new_date)
}
# USE.NAMES = F turns to vector
vec = Vectorize(fix_dates, vectorize.args = "date_", USE.NAMES = F)
new_dates = vec(wide_cases$Date)
new_dates
new_cases
wide_cases
head(cases)
fix_dates = function(date_) {
#date_ = "May 1"
separate = str_split(date_, "-")
month  = separate[[1]][2]
day = separate[[1]][1]
init = substr(month, start = 1, stop = 1)
if (init == "F") {
new_month = '2' }
else if (init == "M") {
new_month = '3' }
else {
new_month = '4' }
year = '20'
new_date = paste(new_month, day, year,sep = '/')
return(new_date)
}
# USE.NAMES = F turns to vector
vec = Vectorize(fix_dates, vectorize.args = "date_", USE.NAMES = F)
vec(cases$Date)
new_dates = vec(cases$Date)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
deaths$Date = as.Date(new_dates)
new_dates
cases$Date = as.Date(new_dates)
head(cases)
head(test)
new_dates = vec(test$Date)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
test$Date = as.Date(new_dates)
head(test)
write.csv(wide_cases, 'reported_COVID_cases_wideformat.csv')
write.csv(wide_cases, 'reported_COVID19_cases_wideformat.csv')
test = fread('reported_COVID19_cases_wideformat.csv')
test
test[46]
test[44]
test[45]
test[1:45]
dim(test)
new = test[1:45,1:58]
new
new = test[1:45,1:58]
write.csv(new, 'reported_COVID19_cases_wideformat.csv')
# perform regression on following
data = fread('reported_COVID19_cases_wideformat.csv')
data
linear = lm(new_confirmed ~ ., data = data)
data$V1 = NULL
data
data$V1 = NULL
data
data[,-1]
linear = lm(new_confirmed ~ ., data = data[,-1])
linear = lm(new_confirmed ~ ., data = data[,-1])
data
linear = lm(new_confirmed ~ ., data = data[,-1])
linear = lm(`new_confirmed` ~ ., data = data[,-1])
linear = lm('new_confirmed' ~ ., data = data[,-1])
data
linear = lm(new_cofirmed ~ ., data = data[,-1])
linear
cases_by_date = data[, .(sum(new_cofirmed)), by = .(Date)]
cases_by_date
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
cases_by_date
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
data
new_dates = vec(data$Date)
# convert from m/d/y => y-m-d
new_dates = mdy(new_dates)
data$Date = as.Date(new_dates)
data
write.csv(data, 'reported_COVID19_cases_wideformat.csv')
# perform regression on following
data = fread('reported_COVID19_cases_wideformat.csv')
data
data$V1 = NULL
# simple multiple linear regression
linear = lm(new_cofirmed ~ ., data = data[,-1])
# perform linear regression on below data
cases_by_date = data[, .(sum(new_cofirmed)), by = .(Date)]
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
data$Date = as.Date(data$Date)
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() + scale_color_manual(values = c('#00AFBB')) +
theme_minimal() + geom_smooth(method = 'lm', se = F)
cases_by_date
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() +
theme_minimal() + geom_smooth(method = 'lm', se = F)
data
# perform linear regression on below data
cases_by_date = data[, .(sum(new_cofirmed)), by = .(Date)]
ggplot(cases_by_date, aes(x = Date, y = V1)) +
geom_line() +
theme_minimal() + geom_smooth(method = 'lm', se = F)
linear_cases = lm(new_cofirmed ~ Date, cases_by_date)
linear_cases = lm(V1 ~ Date, cases_by_date)
